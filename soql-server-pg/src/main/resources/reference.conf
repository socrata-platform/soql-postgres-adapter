com.socrata.soql-server-pg {

  # port = 6050

  # instance = "primus"

  # curator.ensemble = ["localhost:2181"]

  leading-search = true # search is applied before projection, grouping and join

  curator {
    namespace = "com.socrata/soda"
    session-timeout = 40s
    connect-timeout = 5s
    base-retry-wait = 100ms
    max-retry-wait = 10s
    max-retries = 29
  }

  service-advertisement {
    service-base-path = "/services"
    name = "pg"
  }

  metrics {
    # Should be unique for each service
    prefix = "com.socrata.soql-server-pg"
    # log-metrics = true
    # enable-graphite = true
  }

  liveness-check {
     ## Bind to address of the specific hostname or IP if specified, otherwise use wildcard. This should be set on
     ##  systems with multiple interfaces on the same network or you may risk sending responses from the wrong IP.
     #address = "localhost"
     ## Listen on port if specified, otherwise use ephemeral port.
     #port = 6051
  }

  # The maximum number of concurrent queries that can be active per dataset
  # Any query attempts beyond this will result in a HTTP 429 Too Many Requests response.
  # This should be smaller than the database pool size and threadpool limit to mitigate
  # the impact one dataset can have on the service.
  max-concurrent-requests-per-dataset = 15

  max-query-timeout = "10m"

  http-query-timeout-delta = "2s"

  threadpool {
    min-threads = 10
    max-threads = 100
    idle-timeout = 30 s
    # Based on throughput of 50 req/sec * 10 seconds for recovery
    queue-length = 500
  }

  store {
    database {
      app-name = "soql-server-pg"
      c3p0 {
        maxPoolSize = 40
        idleConnectionTestPeriod = 60
        testConnectionOnCheckin = true
        preferredTestQuery = "SELECT 1"
        maxIdleTimeExcessConnections = 300
      }
    }

    secondary-metrics {
      // not used by soql-server-pg
    }
  }

  log4j {
    rootLogger = [ INFO, console ]
    appender {
      console.class = org.apache.log4j.ConsoleAppender
      console.props {
        layout.class = org.apache.log4j.PatternLayout
        layout.props {
          ConversionPattern = "%d %p [%X{X-Socrata-RequestId}] [%t] [%X{X-Socrata-Resource}] %c{1} %m%n"
        }
      }
    }
  }
}

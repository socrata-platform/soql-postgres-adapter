# Config for secondary-watcher and soql-server-pg
# Used for running the service locally as a process or in a docker container

# use local.dev.socrata.net to support solo which resolves to 127.0.0.1
common-host = "local.dev.socrata.net"
common-zk-host = "local.dev.socrata.net:2181"
common-zk-ensemble = ["local.dev.socrata.net:2181"]
common-amq-conn-str = "tcp://local.dev.socrata.net:61616"

common-instance = primus

common-database {
  host = ${common-host}
  port = 5432
  username = blist
  password = blist

  c3p0 {
    maxPoolSize = 20
    idleConnectionTestPeriod = 60
    testConnectionOnCheckin = true
    preferredTestQuery = "SELECT 1"
    maxIdleTimeExcessConnections = 300
  }
}

com.socrata.pg.common {
  database = ${common-database} {
    database = secondary
  }

  log4j = ${common-log4j} {
    logger.com.socrata = INFO
  }
}

com.socrata.soql-server-pg {
  curator.ensemble = ${common-zk-ensemble}
  service-advertisement.address = ${common-host}

  port = 6090
  liveness-check.port = 6091

  metrics {
    log-metrics = false
    enable-graphite = false
  }

  store = ${com.socrata.pg.common} {
    database.app-name = soql-server-pg
  }

  migrations = ${com.socrata.pg.common} {
    database.app-name = soql-server-pg
  }

  instance = ${common-instance}
}

com.socrata.coordinator.secondary-watcher = {
  database = ${common-database} {
    app-name = pg-secondary-store
    database = datacoordinator
  }

  instance = ${common-instance}

  curator.ensemble = ${common-zk-ensemble}
  service-advertisement.address = ${common-host}
  collocation.group = [${common-instance}]

  secondary {
    # unused
    defaultGroups = []
    groups { }

    instances {
      pg {
        secondaryType = pg
        config = ${com.socrata.pg.store}
        numWorkers = 2
      }
    }
  }

  claim-timeout = 30m
  watcher-id = 61e9a209-98e7-4daa-9c43-5778a96e1d8a

  metrics {
    # Should be unique for each service
    prefix = "com.socrata.data.coordinator"
    log-metrics = false
    enable-graphite = false
  }

  tmpdir = ${java.io.tmpdir}

  message-producer {
    eurybates {
      producers = "activemq"
      activemq.connection-string = ${common-amq-conn-str}
    }

    zookeeper {
      conn-spec = ${common-zk-host}
      session-timeout = 4s
    }
  }

  log4j = ${common-log4j} {
    appender.console.props.layout.props.ConversionPattern = "[%t] (%X{job-id}) (%X{X-Socrata-RequestId}) [%X{dataset-id}] %p %c{1} %d %m%n"
  }
}

com.socrata.pg.store = ${com.socrata.pg.common} {
  database.app-name = pg-secondary-store
}
instances {
{% for i in PG_SECONDARY_INSTANCES.split() %}
  {% set name, hostname = i.split(':') %}
  {{ name }} {
    secondaryType = {{ SECONDARY_TYPE }}
    numWorkers = {{ PG_SECONDARY_NUM_WORKERS }}
    config = {
      database {
        app-name = "{{ APP_NAME }}"
        host = "{{ hostname }}"
        port = "{{ PG_SECONDARY_DB_PORT }}"
        database = "{{ PG_SECONDARY_DB_NAME }}"
        username = "{{ PG_SECONDARY_DB_USER }}"
        {{ PG_SECONDARY_DB_PASSWORD_LINE }}
        login-timeout = 10s
        connect-timeout = 10s
        cancel-signal-timeout = 10s
        tcp-keep-alive = true

        c3p0 {
          maxPoolSize = {{ PG_SECONDARY_NUM_WORKERS|int + 1 }} # one connection per worker plus one for the table dropper
          idleConnectionTestPeriod = 60
          testConnectionOnCheckin = true
          preferredTestQuery = "SELECT 1"
          maxIdleTimeExcessConnections = 300
          connectionCustomizerClassName = com.socrata.thirdparty.c3p0.ConnectionCustomizer
          extensions {
            onAcquire = "SET work_mem = '{{ PG_SECONDARY_WORK_MEM }}'; COMMIT"
          }
        }
      }

      transparent-copy-function = "{{ PG_SECONDARY_TRANSPARENT_COPY_FUNCTION }}"

      # TODOMS figure out right strategy for where this should go
      log4j {
        rootLogger = [ INFO, console ]
        appender {
          console.class = org.apache.log4j.ConsoleAppender
          console.props {
            layout.class = org.apache.log4j.PatternLayout
            layout.props {
              ConversionPattern = "%d %p [%X{X-Socrata-RequestId}] [%t] [%X{X-Socrata-Resource}] %c{1} %m%n"
            }
          }
        }
        # make it possible to optionally configure a higher log level for com.socrata components for debugging
        {% if SOCRATA_LOG_LEVEL is defined -%}
        logger.com.socrata = {{ SOCRATA_LOG_LEVEL }}
        {%- endif %}
      }

      tablespace = "{{ PG_SECONDARY_TABLESPACE_FN }}"

      {% if IS_CITUS is defined -%}
      is-citus = {{ IS_CITUS }}
      {%- endif %}

      {% if ZOOKEEPER_ENSEMBLE is defined -%}
      curator = {
        ensemble = {{ ZOOKEEPER_ENSEMBLE }}
        namespace = "com.socrata/soda"
        session-timeout = 40s
        connect-timeout = 5s
        base-retry-wait = 100ms
        max-retry-wait = 10s
        max-retries = 29
      }
      {%- endif %}

      secondary-metrics {
        enabled = {{ PG_SECONDARY_METRICS_ENABLED }}
      }
    }
  }
{% endfor %}
}
